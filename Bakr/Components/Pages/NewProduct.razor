@page "/NewProduct"
@page "/NewProduct/{id:int}"
@attribute [Authorize(Policy = "AdminPolicy")]
@using Bakr.Client.Pages
@using Bakr.Data
@using Bakr.Endpoints
@using System.Text.Json
@using Bakr.Shared.Dtos
@using Bakr.Shared.Entities
@attribute [StreamRendering]
@inject ApplicationDbContext dbContext
@inject NavigationManager NavigationManager

<PageTitle>@title</PageTitle>

<EditProduct Id="@Id" genres="@genres" productFromParent="@product" title="@title" compindUrl="@compindUrl"/>

@code {
    [Parameter]
    public int? Id {get; set;}
    private Genre[]? genres;
    private ProductDetails? product;

    private static string imageUrl = "api/filesave/Assets/Products/";

    private string compindUrl = imageUrl + "defualt.webp";

    private string? title;

    protected override void OnParametersSet()
    {
        if (Id is null)
        {
            product = new()
            {
                Name = string.Empty,
                Price = 0
            };
            title = "New Product";
        }
    }


    protected override async Task OnInitializedAsync() 
    {
        var httpContext = new DefaultHttpContext
        {
            // RequestServices needs to be set so the IResult implementation can log.
            RequestServices = new ServiceCollection().AddLogging().BuildServiceProvider(),
            Response =
            {
                // The default response body is Stream.Null which throws away anything that is written to it.
                Body = new MemoryStream(),
            },
        };
        IResult result = await GenresEndpoint.GetGenresAsync(dbContext);
        await result.ExecuteAsync(httpContext);
        // Reset MemoryStream to start so we can read the response.
        httpContext.Response.Body.Position = 0;
        JsonSerializerOptions jsonSerializerOptions = new(JsonSerializerDefaults.Web);
        if(httpContext.Response.StatusCode == 200) {
            genres = await JsonSerializer.DeserializeAsync<Genre[]>(httpContext.Response.Body, jsonSerializerOptions);
        } else {
            genres = [];
        }
        if(Id is not null) {
            httpContext = new DefaultHttpContext
            {
                // RequestServices needs to be set so the IResult implementation can log.
                RequestServices = new ServiceCollection().AddLogging().BuildServiceProvider(),
                Response =
                {
                    // The default response body is Stream.Null which throws away anything that is written to it.
                    Body = new MemoryStream(),
                },
            };
            result = await ProductsEndpoint.GetProductAsync(Id.Value, dbContext);
            await result.ExecuteAsync(httpContext);

            // Reset MemoryStream to start so we can read the response.
            httpContext.Response.Body.Position = 0;
            if(httpContext.Response.StatusCode == 200) {
                product = await JsonSerializer.DeserializeAsync<ProductDetails>(httpContext.Response.Body, jsonSerializerOptions);
                title = $"Edit {product?.Name}";
                if(product?.Picture is not null && product.Picture != "") {
                    compindUrl = imageUrl + product.Picture;
                }
            } else if(httpContext.Response.StatusCode == 404) {
                NavigationManager.NavigateTo("/NewProduct");
            }
        }
    }
}
