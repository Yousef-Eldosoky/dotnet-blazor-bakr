@page "/"

@using Bakr.Data
@using Bakr.Endpoints
@using Bakr.Shared.Entities
@using System.Text.Json
@inject NavigationManager NavigationManager
@attribute [Authorize]
@attribute [StreamRendering]
@inject ApplicationDbContext dbContext

<PageTitle> Product Catalog</PageTitle>


@if(products is not null) {
    <div class="row g-3 card-group mt-2">
        @foreach(Product product in products) {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card" style="width: 20rem;">
                    @if(product.Picture is not null && product.Picture != "") {
                        compinedUrl = imageUrl + product.Picture;
                    } else {
                        compinedUrl = imageUrl + "defualt.webp";
                    }
                    <img src="@compinedUrl" class="card-img-top img-thumbnail" alt="@product.Name" style="height: 250px; object-fit: cover;">
                    <div class="card-body" style="height: 330px;">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text" style="height: 125px; text-overflow: ellipsis; overflow: hidden;">@product.Description</p>
                        @if(product.Genre is not null) {
                            <h6 class="fw-lighter">Genre: @product.Genre.Name</h6>
                        }
                        <h6 class="fw-lighter">Quantity: @product.Quantity</h6>
                        <h5>Price: @product.Price</h5>
                        <div class="d-flex">
                            <a href="#" class="btn btn-primary me-2">Go somewhere</a>
                            <AuthorizeView Policy="AdminPolicy">
                                <a href="/NewProduct/@product.Id" class="btn btn-primary me-2" role="button">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(product)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                                <CascadingValue Value="this">
                                    <DeleteProduct Product="@product" />
                                </CascadingValue>
                            </AuthorizeView>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else {
    <CardPlaceholder />
}

@code {
    private Product[]? products;

    protected override async Task OnInitializedAsync() 
    {
        var productHttpContext = new DefaultHttpContext
        {
            // RequestServices needs to be set so the IResult implementation can log.
            RequestServices = new ServiceCollection().AddLogging().BuildServiceProvider(),
            Response =
            {
                // The default response body is Stream.Null which throws away anything that is written to it.
                Body = new MemoryStream(),
            },
        };

        IResult result = await ProductsEndpoint.GetProductsAsync(dbContext);
        await result.ExecuteAsync(productHttpContext);

        // Reset MemoryStream to start so we can read the response.
        productHttpContext.Response.Body.Position = 0;
        JsonSerializerOptions jsonSerializerOptions = new(JsonSerializerDefaults.Web);
        if(productHttpContext.Response.StatusCode == 200) {
            products = await JsonSerializer.DeserializeAsync<Product[]>(productHttpContext.Response.Body, jsonSerializerOptions);
        } else {
            products = [];
        }
    }
    
    private static string imageUrl = "api/filesave/Assets/Products/";

    private string? compinedUrl;

    private string GetDeleteModalId(Product product)
    {
        return $"#{DeleteProduct.GetModalId(product)}";
    }
} 
