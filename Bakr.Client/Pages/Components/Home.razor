@attribute [StreamRendering]
@rendermode InteractiveWebAssembly
@inject ProductsClient Client
@inject NavigationManager NavigationManager

<PageTitle> Product Catalog</PageTitle>


@if(products is not null) {
    <div class="row g-3 card-group mt-2">
        @foreach(Product product in products) {
            <div class="col-12 col-md-6 col-lg-4">
                <div class="card" style="width: 20rem;">
                    @if(product.Picture is not null) {
                        compinedUrl = imageUrl + product.Picture;
                    } else {
                        compinedUrl = imageUrl + defualtImage;
                    }
                    <img src="@compinedUrl" class="card-img-top img-thumbnail" alt="@product.Name" style="height: 250px; object-fit: cover;">
                    <div class="card-body" style="height: 330px;">
                        <h5 class="card-title">@product.Name</h5>
                        <p class="card-text" style="height: 125px; text-overflow: ellipsis; overflow: hidden;">@product.Description</p>
                        @if(product.Genre is not null) {
                            <h6 class="fw-lighter">Genre: @product.Genre.Name</h6>
                        }
                        <h6 class="fw-lighter">Quantity: @product.Quantity</h6>
                        <h5>Price: @product.Price</h5>
                        <div class="d-flex">
                            <a href="#" class="btn btn-primary me-2">Go somewhere</a>
                            @if(Admin) {
                                <a href="/EditProduct/@product.Id" class="btn btn-primary me-2" role="button">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(product)">
                                    <i class="bi bi-trash3"></i>
                                </button>
                                <CascadingValue Value="this">
                                    <DeleteProduct Product="@product" />
                                </CascadingValue>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else {
    <CardPlaceholder />
}

@code {
    private Product[]? products;
    
    private static string imageUrl = "api/filesave/Assets/Products/";

    private static string defualtImage = "defualt.webp";

    private string? compinedUrl;

    [Parameter]
    public bool Admin { get; set; }

    private string GetDeleteModalId(Product product)
    {
        return $"#{DeleteProduct.GetModalId(product)}";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) await GetProductsAsync();
    }

    private async Task GetProductsAsync() {
        products = await Client.GetProductsAsync();
        StateHasChanged();
    }

    public async Task RefreshStateAsync(){
        await this.GetProductsAsync();
    }
} 
