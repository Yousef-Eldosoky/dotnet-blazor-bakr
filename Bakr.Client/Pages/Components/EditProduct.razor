@using Bakr.Shared.Dtos
@using Bakr.Shared.Models
@using System.Net.Http.Headers

@attribute [Authorize(Policy = "AdminPolicy")]
@rendermode InteractiveWebAssembly

@inject ILogger<FileUpload> Logger
@inject HttpClient Http
@inject ProductsClient ProductClient
@inject NavigationManager NavigationManager


<h3>@Title</h3>

@if (Genres is null || Product is null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border m-5" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-md-4">
        </div>
        <EditForm Model="Product" FormName="EditProduct" OnValidSubmit="HandleSubmitAsync" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <img src="@_combinedUrl" alt="@Product.Name" style="height: 250px; object-fit: cover;">
            <div class="mb-3">
                <label for="image" class="form-label">Image:</label>
                    <CascadingValue Value="this">
                        <FileUpload UploadResult="@_uploadResult" ValidationMessage="@_validationMessage" ShouldRenderComponent="@_shouldRender" />
                    </CascadingValue>
                    @if(Id is not null)
                    {
                        <a class="btn btn-danger" @onclick="DeleteImage" role="button">
                            Delete Image
                        </a>
                    }
                <InputText class="form-control" id="image" @bind-Value="Product.Picture" hidden/>
                <ValidationMessage For="() => Product.Picture" />
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText class="form-control" id="name" @bind-Value="Product.Name" />
                <ValidationMessage For="() => Product.Name" />
            </div>
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label>
                <InputSelect class="form-select" id="genre" @bind-Value="Product.GenreId">
                <option value="">Select a genre</option>
                @foreach (Genre genre in Genres)
                {
                    <option value="@genre.Id">@genre.Name</option>
                }
                </InputSelect>
                <ValidationMessage For="() => Product.GenreId" />
            </div>
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label>
                <InputText class="form-control" id="description" @bind-Value="Product.Description" />
                <ValidationMessage For="() => Product.Description" />
            </div>
            <div class="mb-3">
                <label for="price" class="form-label">Price:</label>
                <InputNumber class="form-control" id="price" @bind-Value="Product.Price" />
                <ValidationMessage For="() => Product.Price" />
            </div>
            <div class="mb-3">
                <label for="quantity" class="form-label">Quantity:</label>
                <InputNumber class="form-control" id="quantity" @bind-Value="Product.Quantity" />
                <ValidationMessage For="() => Product.Quantity" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
            <a class="btn btn-secondary" role="button" href="/">Cancel</a>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int? Id {get; set;}

    private string? _validationMessage;

    public IBrowserFile? File;

    private UploadResult _uploadResult = new();

    private bool _shouldRender;

    private static string _imageUrl = "api/fileSave/Assets/Products/";

    private string _combinedUrl = _imageUrl + "default.webp";

    [Parameter]
    public ProductDetails? ProductFromParent {get; set;}

    [SupplyParameterFromForm]
    private ProductDetails? Product {get; set;}

    private long _maxFileSize = 1024 * 1024 * 3; // 3 mb

    [Parameter]
    public List<Genre>? Genres {get; set;}

    [Parameter]
    public required string Title {get; set;}

    protected override void OnParametersSet()
    {
        if (Product is not null) return;
        Product = ProductFromParent;
        if(Product?.Picture is not null && Product.Picture != "") {
            _combinedUrl = _imageUrl + Product.Picture;
        }
    }

    private void DeleteImage() {
        File = null;
        Product!.Picture = null;
        _combinedUrl = _imageUrl + "default.webp";
    }

    private async Task HandleSubmitAsync() {
        ArgumentNullException.ThrowIfNull(Product);
        if(File is not null) {
            await InputFileUpload();
            if(!_uploadResult.Uploaded) return;
            Product.Picture = _uploadResult.StoredFileName;
        }
        if(Id is null)
            await ProductClient.AddProductAsync(Product);
        else {
            Product.Id = Id.Value;
            await ProductClient.UpdateProductAsync(Product);
        }
        NavigationManager.NavigateTo("/");
    }

    private async Task InputFileUpload()
    {
        _shouldRender = false;
        _validationMessage = null;
        bool upload = false;

        using var content = new MultipartFormDataContent();

        try
        {
            // Check if file is an image by MIME type
            if (!File!.ContentType.StartsWith("image/"))
            {
                _validationMessage = "Only image files are allowed.";
                throw new ArgumentException("Accept images only");
            }

            var fileContent = new StreamContent(File.OpenReadStream(_maxFileSize));

            fileContent.Headers.ContentType =
            new MediaTypeHeaderValue(File.ContentType);

            content.Add(
            content: fileContent,
            name: "\"files\"",
            fileName: File.Name);

            upload = true;
        }
        catch (ArgumentException) {
            Logger.LogInformation("{FileName} is not an allowed image type (Err: 4)", File!.Name);
            _uploadResult = new UploadResult
            {
                FileName = File!.Name,
                ErrorCode = 4, // Custom error code for invalid file type
                Uploaded = false
            };
        }
        catch (Exception ex)
        {
            Logger.LogInformation(
            "{FileName} not uploaded (Err: 5): {Message}",
            File!.Name, ex.Message);

            _uploadResult = new UploadResult
            {
                FileName = File.Name,
                ErrorCode = 5,
                Uploaded = false
            };
        }

        if (upload)
        {
            var response = await Http.PostAsync("/api/FileSave", content);

            var newUploadResult = await response.Content
            .ReadFromJsonAsync<UploadResult>();

            if (newUploadResult is not null)
            {
                _uploadResult = newUploadResult;
            }
        }

        _shouldRender = true;
    }

}
