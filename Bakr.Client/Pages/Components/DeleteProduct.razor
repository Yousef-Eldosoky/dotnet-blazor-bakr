@inject ProductsClient Client
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<!-- Modal -->
<div class="modal fade" id="@GetModalId(Product)" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">@title</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="@Confirm">Delete
        </button>
      </div>
    </div>
  </div>
</div>

@code {
  [Parameter]
  public Product? Product { get; set; }

  [CascadingParameter]
  public Home? _Parent { get; set; }

  private string title = string.Empty;

  protected override void OnParametersSet()
  {
    title = $"Delete {Product?.Name}?";
  }

  public static string GetModalId(Product? product)
  {
    ArgumentNullException.ThrowIfNull(product);
    return $"deleteModal-{product.Id}";
  }

  private async Task Confirm()
  {
    await Client.DeleteProductAsync(Product!.Id);
    NavigationManager.Refresh();
  }
}
