@rendermode InteractiveWebAssembly

@using Bakr.Shared.Models
@inject ILogger<FileUpload> Logger
@attribute [Authorize]
@attribute [StreamRendering]

<p>
    <label>
        <InputFile OnChange="OnInputFileChange" accept=".jpg, .jpeg, .png, .gif, .webp" class="form-control" />
    </label>
</p>

@if (validationMessage is not null)
{
    <p style="color:red;">@validationMessage</p>
}

@if(_Parent?.file != null) {
    <div class="card">
        <div class="card-body">
            <ul>
                <li>
                    File: @_Parent.file.Name
                    <br>
                    @if (FileUploading(uploadResult, _Parent.file.Name, Logger,
                             out var result))
                    {
                        <span>
                            Waiting for upload..
                        </span>
                    }
                    else
                    {
                        <span style="color: red;">
                            There was an error uploading the file
                            (Error: @result.ErrorCode).
                        </span>
                    }
                </li>
            </ul>
        </div>
    </div>
    <br />
}

@code {

    [CascadingParameter]
    public EditProduct? _Parent { get; set; }

    [Parameter]
    public required UploadResult uploadResult { get; set; }

    [Parameter]
    public bool shouldRender { get; set; }

    [Parameter]
    public string? validationMessage { get; set; }

    protected override bool ShouldRender() => shouldRender;

    private void OnInputFileChange(InputFileChangeEventArgs e) {
        if(_Parent is null) return;
        _Parent.file = e.File;
    }

    private static bool FileUploading(UploadResult uploadResult,
    string? fileName, ILogger<FileUpload> logger, out UploadResult result)
    {
        result = uploadResult;

        if (!result.Uploaded)
        {
            result.ErrorCode = result.ErrorCode == 0 ? 5 : result.ErrorCode;
            logger.LogInformation("{FileName} not uploaded (Err: {result.ErrorCode})", fileName, result.ErrorCode);
        }

        return result.Uploaded;
    }
}